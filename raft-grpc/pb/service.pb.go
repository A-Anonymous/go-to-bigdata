// Code generated by protoc-gen-gogo.
// source: pb/service.proto
// DO NOT EDIT!

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pb/service.proto
		pb/demo.proto

	It has these top-level messages:
		DemoReqResp
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftReplicaService service

type RaftReplicaServiceClient interface {
	Demo(ctx context.Context, in *DemoReqResp, opts ...grpc.CallOption) (*DemoReqResp, error)
}

type raftReplicaServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftReplicaServiceClient(cc *grpc.ClientConn) RaftReplicaServiceClient {
	return &raftReplicaServiceClient{cc}
}

func (c *raftReplicaServiceClient) Demo(ctx context.Context, in *DemoReqResp, opts ...grpc.CallOption) (*DemoReqResp, error) {
	out := new(DemoReqResp)
	err := grpc.Invoke(ctx, "/pb.RaftReplicaService/Demo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftReplicaService service

type RaftReplicaServiceServer interface {
	Demo(context.Context, *DemoReqResp) (*DemoReqResp, error)
}

func RegisterRaftReplicaServiceServer(s *grpc.Server, srv RaftReplicaServiceServer) {
	s.RegisterService(&_RaftReplicaService_serviceDesc, srv)
}

func _RaftReplicaService_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoReqResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftReplicaServiceServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RaftReplicaService/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftReplicaServiceServer).Demo(ctx, req.(*DemoReqResp))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftReplicaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RaftReplicaService",
	HandlerType: (*RaftReplicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Demo",
			Handler:    _RaftReplicaService_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

func init() { proto.RegisterFile("pb/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x48, 0xd2, 0x2f,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x92, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb,
	0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xa8, 0x90, 0xe2, 0x2d, 0x48, 0xd2, 0x4f,
	0x49, 0xcd, 0xcd, 0x87, 0x70, 0x8d, 0x82, 0xb9, 0x84, 0x82, 0x12, 0xd3, 0x4a, 0x82, 0x52, 0x0b,
	0x72, 0x32, 0x93, 0x13, 0x83, 0x21, 0x86, 0x09, 0xd9, 0x72, 0xb1, 0xb8, 0xa4, 0xe6, 0xe6, 0x0b,
	0xf1, 0xeb, 0x15, 0x24, 0xe9, 0x81, 0x58, 0x41, 0xa9, 0x85, 0x41, 0xa9, 0xc5, 0x05, 0x52, 0xe8,
	0x02, 0x4a, 0xc2, 0x4d, 0x97, 0x9f, 0x4c, 0x66, 0xe2, 0x55, 0xe2, 0xd0, 0x2f, 0x33, 0x04, 0x9b,
	0x6b, 0xc5, 0xa8, 0x95, 0xc4, 0x06, 0x36, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x78, 0x2f,
	0x38, 0x5e, 0xa0, 0x00, 0x00, 0x00,
}
